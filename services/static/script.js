console.log('JavaScript loaded');
let selectedPresets = [];
console.log('selectedPresets initialized:', selectedPresets);

function switchTab(tabName) {
  // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö —Ç–∞–±–æ–≤ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  document.querySelectorAll('.tab').forEach(tab => tab.classList.remove('active'));
  document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
  
  // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞–±
  document.querySelector(`[onclick="switchTab('${tabName}')"]`).classList.add('active');
  document.getElementById(`${tabName}-tab`).classList.add('active');
  
  // –ï—Å–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ HuggingFace, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç–∞–± "–ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞"
  if (tabName === 'huggingface') {
    switchHFMethod('url');
  }
}

function switchHFMethod(method) {
  // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö —Ç–∞–±–æ–≤ –≤ HuggingFace —Ä–∞–∑–¥–µ–ª–µ
  document.querySelectorAll('#huggingface-tab .tabs .tab').forEach(tab => tab.classList.remove('active'));
  
  // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞–±
  document.querySelector(`#huggingface-tab [onclick="switchHFMethod('${method}')"]`).classList.add('active');
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—ã
  if (method === 'url') {
    document.getElementById('hf-url-form').style.display = 'block';
    document.getElementById('hf-repo-form').style.display = 'none';
  } else {
    document.getElementById('hf-url-form').style.display = 'none';
    document.getElementById('hf-repo-form').style.display = 'block';
  }
}

function togglePreset(presetId) {
  console.log('togglePreset called with:', presetId);
  const card = document.querySelector(`[data-preset="${presetId}"]`);
  console.log('Card found:', card);
  
  if (selectedPresets.includes(presetId)) {
    selectedPresets = selectedPresets.filter(p => p !== presetId);
    card.classList.remove('selected');
    console.log('Removed preset:', presetId);
  } else {
    selectedPresets.push(presetId);
    card.classList.add('selected');
    console.log('Added preset:', presetId);
  }
  
  const btn = document.getElementById('download-presets-btn');
  btn.disabled = selectedPresets.length === 0;
  btn.textContent = selectedPresets.length > 0 ? 
    `üì• –°–∫–∞—á–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã (${selectedPresets.length})` : 
    'üì• –°–∫–∞—á–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã';
  
  console.log('Selected presets:', selectedPresets);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Lightning LoRA
  updateLightningLoraInfo();
}

function updateLightningLoraInfo() {
  const lightningText = document.getElementById('lightning-lora-text');
  const lightningDetails = document.getElementById('lightning-lora-details');
  const lightningList = document.getElementById('lightning-lora-list');
  
  if (selectedPresets.length === 0) {
    lightningText.textContent = '‚ö° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –¥–æ–∫–∞—á–∞—Ç—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ Lightning LoRA';
    lightningDetails.style.display = 'none';
    // –û—Ç–∫–ª—é—á–∞–µ–º —á–µ–∫–±–æ–∫—Å –∏ –¥–µ–ª–∞–µ–º –µ–≥–æ –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º
    document.getElementById('lightning-lora-checkbox').disabled = true;
    document.getElementById('lightning-lora-checkbox').parentElement.style.opacity = '0.5';
    return;
  }
  
  const lightningModels = {
    'WAN_T2V': [
      'T2V-Lightning-250928-high_noise_model.safetensors',
      'T2V-Lightning-250928-low_noise_model.safetensors'
    ],
    'WAN_I2V': [
      'I2V-Lightning-Seko-V1-high_noise_model.safetensors',
      'I2V-Lightning-Seko-V1-low_noise_model.safetensors'
    ],
    'WAN_FLF': [
      'FLF-Lightning-Seko-V1-high_noise_model.safetensors',
      'FLF-Lightning-Seko-V1-low_noise_model.safetensors'
    ]
  };
  
  const selectedLightningModels = [];
  selectedPresets.forEach(preset => {
    if (lightningModels[preset]) {
      selectedLightningModels.push(...lightningModels[preset]);
    }
  });
  
  if (selectedLightningModels.length > 0) {
    const count = selectedLightningModels.length;
    const fileWord = count === 1 ? '—Ñ–∞–π–ª' : count < 5 ? '—Ñ–∞–π–ª–∞' : '—Ñ–∞–π–ª–æ–≤';
    lightningText.textContent = `‚ö° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –¥–æ–∫–∞—á–∞—Ç—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ Lightning LoRA (${count} ${fileWord})`;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–µ–∫–±–æ–∫—Å –∏ –¥–µ–ª–∞–µ–º –µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã–º
    document.getElementById('lightning-lora-checkbox').disabled = false;
    document.getElementById('lightning-lora-checkbox').parentElement.style.opacity = '1';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≥–∞–ª–æ—á–∫–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞
    const checkbox = document.getElementById('lightning-lora-checkbox');
    if (checkbox.checked) {
      lightningDetails.style.display = 'block';
      lightningList.innerHTML = selectedLightningModels.map(model => 
        `‚Ä¢ ${model}`
      ).join('<br>');
    } else {
      lightningDetails.style.display = 'none';
    }
  } else {
    lightningText.textContent = '‚ö° –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ Lightning LoRA –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤';
    lightningDetails.style.display = 'none';
    // –û—Ç–∫–ª—é—á–∞–µ–º —á–µ–∫–±–æ–∫—Å –∏ –¥–µ–ª–∞–µ–º –µ–≥–æ –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º
    document.getElementById('lightning-lora-checkbox').disabled = true;
    document.getElementById('lightning-lora-checkbox').parentElement.style.opacity = '0.5';
  }
}

function downloadPresets() {
  if (selectedPresets.length === 0) return;
  
  const progress = document.getElementById('preset-progress');
  const result = document.getElementById('preset-result');
  const btn = document.getElementById('download-presets-btn');
  const lightningCheckbox = document.getElementById('lightning-lora-checkbox');
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
  progress.style.display = 'block';
  result.textContent = '';
  btn.disabled = true;
  btn.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞...';
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
  const formData = new FormData();
  formData.append('presets', selectedPresets.join(','));
  formData.append('lightning_lora', lightningCheckbox.checked ? 'true' : 'false');
  
  fetch('/download_presets', {
    method: 'POST',
    body: formData
  })
  .then(response => response.json())
  .then(data => {
    if (data.task_id) {
      const lightningStatus = lightningCheckbox.checked ? ' (–≤–∫–ª—é—á–∞—è Lightning LoRA)' : '';
      result.textContent = data.message + lightningStatus;
      // –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞
      pollStatus(data.task_id);
    } else {
      result.textContent = data.message;
      progress.style.display = 'none';
      btn.disabled = false;
      btn.textContent = 'üì• –°–∫–∞—á–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã';
    }
  })
  .catch(error => {
    result.textContent = '‚ùå –û—à–∏–±–∫–∞: ' + error.message;
    progress.style.display = 'none';
    btn.disabled = false;
    btn.textContent = 'üì• –°–∫–∞—á–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã';
  });
}

function pollStatus(taskId) {
  const progress = document.getElementById('preset-progress');
  const result = document.getElementById('preset-result');
  const btn = document.getElementById('download-presets-btn');
  
  fetch(`/status/${taskId}`)
  .then(response => response.json())
  .then(data => {
    if (data.status === 'completed' || data.status === 'error') {
      let message = data.message;
      const lightningCheckbox = document.getElementById('lightning-lora-checkbox');
      if (lightningCheckbox && lightningCheckbox.checked && data.status === 'completed') {
        message += '\n‚ö° Lightning LoRA —Ç–∞–∫–∂–µ —Å–∫–∞—á–∞–Ω—ã (—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –≤–µ—Ä—Å–∏–∏)';
      }
      result.textContent = message;
      progress.style.display = 'none';
      btn.disabled = false;
      btn.textContent = 'üì• –°–∫–∞—á–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã';
    } else if (data.status === 'running') {
      result.textContent = data.message + ' (–ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å...)';
      // –ü–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => pollStatus(taskId), 2000);
    } else {
      result.textContent = '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ' + data.message;
      progress.style.display = 'none';
      btn.disabled = false;
      btn.textContent = 'üì• –°–∫–∞—á–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã';
    }
  })
  .catch(error => {
    result.textContent = '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: ' + error.message;
    progress.style.display = 'none';
    btn.disabled = false;
    btn.textContent = 'üì• –°–∫–∞—á–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã';
  });
}

// –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è HuggingFace...

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', function() {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ Lightning LoRA –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  updateLightningLoraInfo();
});
